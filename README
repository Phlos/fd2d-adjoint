:===============================================================================:
: FD2D = Finite Difference seismic wave propagation in 2D. both for SH waves
: (computationally equivalent to acoustic wave propagation) and P-SV waves.
:===============================================================================:


The following is what you can do.
- run a forward propagation
- generate adjoint sources using the forward simulation results
- run an adjoint simulation 

this should all work if you choose the wave propagation type 'both'. It will, however, NOT be smooth or error-free or anywhere near user-friendly or functional. You'll just have to look at the code to see wut the hell you're actually doing or supposed to be doing.

---------------------------------------------------------------------------------

How to do those things?

Run a forward simulation.
(in ./code/run_forward)
In order to do that, you edit the file input/input_parameters.m to your liking. You can choose any of a number models, either or both of wave propagation SH / PSV, source and receiver configruations, and a lot of other stuff too. Just take a look at it. Beware with grid size & stability issues though :) Just take a look at the header of the run_forward file to see how to run it.
Oh you can also make a movie! That is basically what I'm so disproportionately excited about. If you just fiddle around with the stf you suddenly see what happens to the X and Z components when it points in a different direction. SO COOL.


Look at the seismograms.
(in ./tools/plot_recordings)
What it says. You can look at the seismograms. Check the code to see what input is required.


Make adjoint sources.
(in ./tools/make_adjoint_sources)
This is kind of dumb but necessary. Should be automated at some point. Here you can choose the misfit and what data to compare it to. From the forward field you got all the receiver information in X Y and Z directions and now we make sources from that by picking the wavefields. It'll make things called src_1 to src_how many receivers you had in your forward simulation in the folder input/sources/adjoint.
NOTE 1: right now I use no data to compare the synthetics to - which boils down to making a dummy variable plugged in of zeros(size(your seismograms));
NOTE 2: if you want to do anything with more than one component, you'll have to do this for each component separately... and then rename the buggers manually to src_1_x etc. Yes I know, I really should make this part of the routine better but I just can't be bothered at the moment.


Run an adjoint simulation.
(in ./code/run_adjoint)
But this is better. Backpropagation of receiver residuals and interaction with the forward field like I showed you!! Once you've run the forward simulation, you'll see that in the output there's a gigantic .mat file called v_forward. (the name is a bit tricky since the forward field is stored backwards in time). You also have those sources x y and z from the make adjoint source thingy, and now you can backpropagate it all, and compute kernels (with the help of that v_forward.mat) on the fly. Cool.
Right now, the kernels are separate for x y and z components. It's a bit weird but I guess it mimics if you have N/E/Z receivers and make a kernel for each one separately. Anyway these are density kernels (in lambda mu rho parametrisation!!) because that's what you get when you multiply the forward and adjoint velocity field. For other kernels, things like strain etc are needed. See Andreas' book if you want to know more about that. I'll probably implement that soon.
NOTE: no movie making here yet. That's super duper easy to implement though. On my todo list now :)

-------------------------------------------------------------------------------------

Pour le reste:
I will repeat that it's ugly and barely functional but it's kind of cool to be able to play around with wave propagation AND SEE IT. Note the absorbing boundaries which just multiply the wavefields by smaller and smaller number as you approach the boundaries of the field. Apparently only works in FD. Also note that you can do 2nd order or 4th order accuracy of the wave eq. I do everything with 4th order - andreas says 2nd is not really usable in any way.
Like Gerhard explains in his course (and which you'll therefore probably know everything about) you could use a combination of normal and 45 degrees rotated grid to do the forward calculations, which'll hugely reduce the nr of grid points needed. Might be worth looking into, but right now none of that so there's still numerical dispersion -- as you'll see when you look at the seismograms.
